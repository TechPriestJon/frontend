import { Component, ViewChild, AfterViewInit, ElementRef } from '@angular/core';
import { TWEEN } from '@tweenjs/tween.js'
import { Container } from '@angular/compiler/src/i18n/i18n_ast';
import * as THREE from 'three';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})

export class AppComponent implements AfterViewInit {

  @ViewChild('container') containerRef :ElementRef; 
  private title = 'on-thin-ice';
  private container;

  private camera;
  private scene;
  private renderer;
  private w;
  private h;
  private mesh;
  private atmosphere;
  private point;
  private _baseGeometry;

  private points;

  private overRenderer;

  private curZoomSpeed = 0;
  private zoomSpeed = 50;

  private mouse = { x: 0, y: 0 };
  private mouseOnDown = { x: 0, y: 0 };
  private rotation = { x: 0, y: 0 };
  private target = { x: Math.PI * 3 / 2, y: Math.PI / 6.0 };
  private targetOnDown = { x: 0, y: 0 };

  private distance = 100000;
  private distanceTarget = 100000;
  private padding = 40;
  private PI_HALF = Math.PI / 2;

  private is_animated;

  private DAT: any = new Object();

  private Shaders;

  private _morphTargetId;


  ngAfterViewInit(): void {
    this.container = this.containerRef.nativeElement;
    this.configure();
    this.init();
    
    this.getData();
  }

  public constructor() {
   
  }



  private getData() {

    var globe = new this.DAT.Globe(this.container);

    var xhr;
    TWEEN.start();

    var parser = function processData(allText) {

      var allTextLines = allText.split(/\r\n|\n/).filter(function (s) {
        if (s) {
          return s.charAt(0) != '#';
        }
        return false;
      });
      var data = [];
      var index = 0;
      for (var i = 0; i < 512; i++) {
        var lineValues = allTextLines[i].split(/[ ,]+/).filter(function (s) { return s != "" });

        for (var j = 0; j < 1024; j++) {
          if (i % 4 == 0 && j % 4 == 0 && lineValues[j] != 0) {
            data[index++] = -90.0 + 0.3515625 * i;
            data[index++] = 0.3515625 * j;
            data[index++] = lineValues[j] * 0.01;
          }
        }
      }
      globe.addData(data, { format: 'magnitude', name: 'test', animated: false });
    };

    var settime = function (globe) {
      return function () {
        new TWEEN.Tween(globe).to({ time: 0 }, 500).easing(TWEEN.Easing.Cubic.EaseOut).start();
      };
    };

    xhr = new XMLHttpRequest();
    xhr.open('GET', 'https://services.swpc.noaa.gov/text/aurora-nowcast-map.txt', true);
    xhr.onreadystatechange = function (e) {
      if (xhr.readyState === 4) {
        if (xhr.status === 200) {
          var data = xhr.responseText;
          (<any>window).data = data;
          parser(data);

          globe.createPoints();
          globe.animate();
          document.body.style.backgroundImage = 'none'; // remove loading
        }
      }
    };

    xhr.send(null);
  }

  private colorFn(x){
    var c = new THREE.Color();
    c.setHSL((0.6 - (x * 0.5)), 1.0, 0.5);
    return c;
  }

  private configure() {


    this.Shaders = {
      'earth': {
        uniforms: {
          'texture': { type: 't', value: null }
        },
        vertexShader: [
          'varying vec3 vNormal;',
          'varying vec2 vUv;',
          'void main() {',
          'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
          'vNormal = normalize( normalMatrix * normal );',
          'vUv = uv;',
          '}'
        ].join('\n'),
        fragmentShader: [
          'uniform sampler2D texture;',
          'varying vec3 vNormal;',
          'varying vec2 vUv;',
          'void main() {',
          'vec3 diffuse = texture2D( texture, vUv ).xyz;',
          'float intensity = 1.05 - dot( vNormal, vec3( 0.0, 0.0, 1.0 ) );',
          'vec3 atmosphere = vec3( 1.0, 1.0, 1.0 ) * pow( intensity, 3.0 );',
          'gl_FragColor = vec4( diffuse + atmosphere, 1.0 );',
          '}'
        ].join('\n')
      },
      'atmosphere': {
        uniforms: {},
        vertexShader: [
          'varying vec3 vNormal;',
          'void main() {',
          'vNormal = normalize( normalMatrix * normal );',
          'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
          '}'
        ].join('\n'),
        fragmentShader: [
          'varying vec3 vNormal;',
          'void main() {',
          'float intensity = pow( 0.8 - dot( vNormal, vec3( 0, 0, 1.0 ) ), 12.0 );',
          'gl_FragColor = vec4( 1.0, 1.0, 1.0, 1.0 ) * intensity;',
          '}'
        ].join('\n')
      }
    };
  }
  private init() {

    this.container.style.color = '#fff';
    this.container.style.font = '13px/20px Arial, sans-serif';

    this.w = this.container.offsetWidth || window.innerWidth;
    this.h = this.container.offsetHeight || window.innerHeight;

    this.camera = new THREE.PerspectiveCamera(30, this.w / this.h, 1, 10000);
    this.camera.position.z = this.distance;

    this.scene = new THREE.Scene();

    var geometry:any = new THREE.SphereGeometry(200, 40, 30);

    var shader = this.Shaders['earth'];
    var uniforms = THREE.UniformsUtils.clone(shader.uniforms);

    uniforms['texture'].value = THREE.ImageUtils.loadTexture("../asserts/globe/world.jpg");

    var material = new THREE.ShaderMaterial({

      uniforms: uniforms,
      vertexShader: shader.vertexShader,
      fragmentShader: shader.fragmentShader

    });

    this.mesh = new THREE.Mesh(geometry, material);
    this.mesh.rotation.y = Math.PI;
    this.scene.add(this.mesh);

    shader = this.Shaders['atmosphere'];
    uniforms = THREE.UniformsUtils.clone(shader.uniforms);

    material = new THREE.ShaderMaterial({

      uniforms: uniforms,
      vertexShader: shader.vertexShader,
      fragmentShader: shader.fragmentShader,
      side: THREE.BackSide,
      blending: THREE.AdditiveBlending,
      transparent: true

    });

    this.mesh = new THREE.Mesh(geometry, material);
    this.mesh.scale.set(1.1, 1.1, 1.1);
    this.scene.add(this.mesh);

    geometry = new THREE.BoxGeometry(0.75, 0.75, 1);
    geometry.applyMatrix(new THREE.Matrix4().makeTranslation(0, 0, -0.5));

    this.point = new THREE.Mesh(geometry);

    this.renderer = new THREE.WebGLRenderer({ antialias: true });
    this.renderer.setSize(this.w, this.h);

    this.renderer.domElement.style.position = 'absolute';

    this.container.appendChild(this.renderer.domElement);

    this.container.addEventListener('mousedown', this.onMouseDown, false);

    this.container.addEventListener('mousewheel', this.onMouseWheel, false);

    document.addEventListener('keydown', this.onDocumentKeyDown, false);

    window.addEventListener('resize', this.onWindowResize, false);

    this.container.addEventListener('mouseover', function () {
      this.overRenderer = true;
    }, false);

    this.container.addEventListener('mouseout', function () {
      this.overRenderer = false;
    }, false);
  }




  private addData(data, opts) {
    var lat, lng, size, color, i, step, colorFnWrapper;

    opts.animated = opts.animated || false;
    this.is_animated = opts.animated;
    opts.format = opts.format || 'magnitude'; // other option is 'legend'
    if (opts.format === 'magnitude') {
      step = 3;
      colorFnWrapper = function (data, i) { return this.colorFn(data[i + 2]); }
    } else if (opts.format === 'legend') {
      step = 4;
      colorFnWrapper = function (data, i) { return this.colorFn(data[i + 3]); }
    } else {
      throw ('error: format not supported: ' + opts.format);
    }

    if (opts.animated) {
      if (this._baseGeometry === undefined) {
        this._baseGeometry = new THREE.Geometry();
        for (i = 0; i < data.length; i += step) {
          lat = data[i];
          lng = data[i + 1];
          //        size = data[i + 2];
          color = colorFnWrapper(data, i);
          size = 0;
          this.addPoint(lat, lng, size, color, this._baseGeometry);
        }
      }
      if (this._morphTargetId === undefined) {
        this._morphTargetId = 0;
      } else {
        this._morphTargetId += 1;
      }
      opts.name = opts.name || 'morphTarget' + this._morphTargetId;
    }
    var subgeo = new THREE.Geometry();
    for (i = 0; i < data.length; i += step) {
      lat = data[i];
      lng = data[i + 1];
      color = colorFnWrapper(data, i);
      size = data[i + 2];
      size = size * 200;
      this.addPoint(lat, lng, size, color, subgeo);
    }
    if (opts.animated) {
      this._baseGeometry.morphTargets.push({ 'name': opts.name, vertices: subgeo.vertices });
    } else {
      this._baseGeometry = subgeo;
    }

  };

  private createPoints() {

    if (this._baseGeometry !== undefined) {
      if (this.is_animated === false) {
        this.points = new THREE.Mesh(this._baseGeometry, new THREE.MeshBasicMaterial({
          color: 0xffffff,
          vertexColors: THREE.FaceColors,
          morphTargets: false
        }));
      } else {
        if (this._baseGeometry.morphTargets.length < 8) {
          console.log('t l', this._baseGeometry.morphTargets.length);
          var padding = 8 - this._baseGeometry.morphTargets.length;
          console.log('padding', padding);
          for (var i = 0; i <= padding; i++) {
            console.log('padding', i);
            this._baseGeometry.morphTargets.push({ 'name': 'morphPadding' + i, vertices: this._baseGeometry.vertices });
          }
        }
        this.points = new THREE.Mesh(this._baseGeometry, new THREE.MeshBasicMaterial({
          color: 0xffffff,
          vertexColors: THREE.FaceColors,
          morphTargets: true
        }));
      }
      this.scene.add(this.points);
    }
  }

  private addPoint(lat, lng, size, color, subgeo) {

    var phi = (90 - lat) * Math.PI / 180;
    var theta = (180 - lng) * Math.PI / 180;
    var point;
    point.position.x = 200 * Math.sin(phi) * Math.cos(theta);
    point.position.y = 200 * Math.cos(phi);
    point.position.z = 200 * Math.sin(phi) * Math.sin(theta);

    point.lookAt(this.mesh.position);

    point.scale.z = Math.max(size, 0.1); // avoid non-invertible matrix
    point.updateMatrix();

    for (var i = 0; i < point.geometry.faces.length; i++) {

      point.geometry.faces[i].color = color;

    }
    if (point.matrixAutoUpdate) {
      point.updateMatrix();
    }
    subgeo.merge(point.geometry, point.matrix);
  }

  private onMouseDown(event) {
    event.preventDefault();

    this.container.addEventListener('mousemove', this.onMouseMove, false);
    this.container.addEventListener('mouseup', this.onMouseUp, false);
    this.container.addEventListener('mouseout', this.onMouseOut, false);

    this.mouseOnDown.x = - event.clientX;
    this.mouseOnDown.y = event.clientY;

    this.targetOnDown.x = this.target.x;
    this.targetOnDown.y = this.target.y;

    this.container.style.cursor = 'move';
  }

  private onMouseMove(event) {
    this.mouse.x = - event.clientX;
    this.mouse.y = event.clientY;

    var zoomDamp = this.distance / 1000;

    this.target.x = this.targetOnDown.x + (this.mouse.x - this.mouseOnDown.x) * 0.005 * zoomDamp;
    this.target.y = this.targetOnDown.y + (this.mouse.y - this.mouseOnDown.y) * 0.005 * zoomDamp;

    this.target.y = this.target.y > this.PI_HALF ? this.PI_HALF : this.target.y;
    this.target.y = this.target.y < - this.PI_HALF ? - this.PI_HALF : this.target.y;
  }

  private onMouseUp(event) {
    this.container.removeEventListener('mousemove', this.onMouseMove, false);
    this.container.removeEventListener('mouseup', this.onMouseUp, false);
    this.container.removeEventListener('mouseout', this.onMouseOut, false);
    this.container.style.cursor = 'auto';
  }

  private onMouseOut(event) {
    this.container.removeEventListener('mousemove', this.onMouseMove, false);
    this.container.removeEventListener('mouseup', this.onMouseUp, false);
    this.container.removeEventListener('mouseout', this.onMouseOut, false);
  }

  private onMouseWheel(event) {
    event.preventDefault();
    if (this.overRenderer) {
      this.zoom(event.wheelDeltaY * 0.3);
    }
    return false;
  }

  private onDocumentKeyDown(event) {
    switch (event.keyCode) {
      case 38:
        this.zoom(100);
        event.preventDefault();
        break;
      case 40:
        this.zoom(-100);
        event.preventDefault();
        break;
    }
  }

  private onWindowResize(event) {
    this.camera.aspect = this.container.offsetWidth / this.container.offsetHeight;
    this.camera.updateProjectionMatrix();
    this.renderer.setSize(this.container.offsetWidth, this.container.offsetHeight);
  }

  private zoom(delta) {
    this.distanceTarget -= delta;
    this.distanceTarget = this.distanceTarget > 1000 ? 1000 : this.distanceTarget;
    this.distanceTarget = this.distanceTarget < 350 ? 350 : this.distanceTarget;
  }

  private animate() {
    requestAnimationFrame(this.animate);
    this.render();
  }

  private render() {
    this.zoom(this.curZoomSpeed);

    this.rotation.x += (this.target.x - this.rotation.x) * 0.1;
    this.rotation.y += (this.target.y - this.rotation.y) * 0.1;
    this.distance += (this.distanceTarget - this.distance) * 0.3;

    this.camera.position.x = this.distance * Math.sin(this.rotation.x) * Math.cos(this.rotation.y);
    this.camera.position.y = this.distance * Math.sin(this.rotation.y);
    this.camera.position.z = this.distance * Math.cos(this.rotation.x) * Math.cos(this.rotation.y);

    this.camera.lookAt(this.mesh.position);

    this.renderer.render(this.scene, this.camera);
  }

  private _time;
  get time() {
    return this._time || 0;
  }

  set time(t) {
    var validMorphs = [];
    var morphDict = this.points.morphTargetDictionary;
    for (var k in morphDict) {
      if (k.indexOf('morphPadding') < 0) {
        validMorphs.push(morphDict[k]);
      }
    }
    validMorphs.sort();
    var l = validMorphs.length - 1;
    var scaledt = t * l + 1;
    var index = Math.floor(scaledt);
    for (var i = 0; i < validMorphs.length; i++) {
      this.points.morphTargetInfluences[validMorphs[i]] = 0;
    }
    var lastIndex = index - 1;
    var leftover = scaledt - index;
    if (lastIndex >= 0) {
      this.points.morphTargetInfluences[lastIndex] = 1 - leftover;
    }
    this.points.morphTargetInfluences[index] = leftover;
    this._time = t;
  }

}
